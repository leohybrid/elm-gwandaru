{"version":3,"file":"app.min.js","sources":["../../../_javascript/pwa/app.js"],"sourcesContent":["import Toast from 'bootstrap/js/src/toast';\r\n\r\nif ('serviceWorker' in navigator) {\r\n  // Get Jekyll config from URL parameters\r\n  const src = new URL(document.currentScript.src);\r\n  const register = src.searchParams.get('register');\r\n  const baseUrl = src.searchParams.get('baseurl');\r\n\r\n  if (register) {\r\n    const swUrl = `${baseUrl}/sw.min.js`;\r\n    const notification = document.getElementById('notification');\r\n    const btnRefresh = notification.querySelector('.toast-body>button');\r\n    const popupWindow = Toast.getOrCreateInstance(notification);\r\n\r\n    navigator.serviceWorker.register(swUrl).then((registration) => {\r\n      // Restore the update window that was last manually closed by the user\r\n      if (registration.waiting) {\r\n        popupWindow.show();\r\n      }\r\n\r\n      registration.addEventListener('updatefound', () => {\r\n        registration.installing.addEventListener('statechange', () => {\r\n          if (registration.waiting) {\r\n            if (navigator.serviceWorker.controller) {\r\n              popupWindow.show();\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n      btnRefresh.addEventListener('click', () => {\r\n        if (registration.waiting) {\r\n          registration.waiting.postMessage('SKIP_WAITING');\r\n        }\r\n        popupWindow.hide();\r\n      });\r\n    });\r\n\r\n    let refreshing = false;\r\n\r\n    // Detect controller change and refresh all the opened tabs\r\n    navigator.serviceWorker.addEventListener('controllerchange', () => {\r\n      if (!refreshing) {\r\n        window.location.reload();\r\n        refreshing = true;\r\n      }\r\n    });\r\n  } else {\r\n    navigator.serviceWorker.getRegistrations().then(function (registrations) {\r\n      for (let registration of registrations) {\r\n        registration.unregister();\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"names":["navigator","src","URL","document","currentScript","register","searchParams","get","baseUrl","swUrl","concat","notification","getElementById","btnRefresh","querySelector","popupWindow","Toast","getOrCreateInstance","serviceWorker","then","registration","waiting","show","addEventListener","installing","controller","postMessage","hide","refreshing","window","location","reload","getRegistrations","registrations","_step","_iterator","_createForOfIteratorHelper","s","n","done","value","unregister","err","e","f"],"mappings":"kGAEA,GAAI,kBAAmBA,UAAW,CAEhC,IAAMC,EAAM,IAAIC,IAAIC,SAASC,cAAcH,KACrCI,EAAWJ,EAAIK,aAAaC,IAAI,YAChCC,EAAUP,EAAIK,aAAaC,IAAI,WAErC,GAAIF,EAAU,CACZ,IAAMI,EAAK,GAAAC,OAAMF,EAAO,cAClBG,EAAeR,SAASS,eAAe,gBACvCC,EAAaF,EAAaG,cAAc,sBACxCC,EAAcC,EAAMC,oBAAoBN,GAE9CX,UAAUkB,cAAcb,SAASI,GAAOU,KAAK,SAACC,GAExCA,EAAaC,SACfN,EAAYO,OAGdF,EAAaG,iBAAiB,cAAe,WAC3CH,EAAaI,WAAWD,iBAAiB,cAAe,WAClDH,EAAaC,SACXrB,UAAUkB,cAAcO,YAC1BV,EAAYO,MAGlB,EACF,GAEAT,EAAWU,iBAAiB,QAAS,WAC/BH,EAAaC,SACfD,EAAaC,QAAQK,YAAY,gBAEnCX,EAAYY,MACd,EACF,GAEA,IAAIC,GAAa,EAGjB5B,UAAUkB,cAAcK,iBAAiB,mBAAoB,WACtDK,IACHC,OAAOC,SAASC,SAChBH,GAAa,EAEjB,EACF,MACE5B,UAAUkB,cAAcc,mBAAmBb,KAAK,SAAUc,GAAe,IACjCC,EADiCC,EAAAC,EAC9CH,GAAa,IAAtC,IAAAE,EAAAE,MAAAH,EAAAC,EAAAG,KAAAC,MAAwC,CAAnBL,EAAAM,MACNC,YACf,CAAC,CAAA,MAAAC,GAAAP,EAAAQ,EAAAD,EAAA,CAAA,QAAAP,EAAAS,GAAA,CACH,EAEJ"}